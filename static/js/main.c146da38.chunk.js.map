{"version":3,"sources":["fbase.js","components/Nweet.js","routes/Home.js","routes/Auth.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","dbService","storageService","Nweet","nweetObj","isOwner","useState","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","a","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","prev","onSubmit","event","preventDefault","update","type","placeholder","value","required","onChange","target","onClick","src","width","height","alt","Home","userObj","nweet","setNweet","nweets","setNweets","attachment","setAttachment","useEffect","collection","onSnapshot","snapshot","nweetArray","docs","map","data","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","add","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","key","Auth","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","onSocialClick","provider","auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","getMyNweets","where","orderBy","get","signOut","push","Navigation","to","AppRouter","isLoggedIn","exact","path","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Boolean","currentUser","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c146da38.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\"\r\nimport \"firebase/auth\"\r\nimport \"firebase/firestore\"\r\nimport \"firebase/storage\"\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n}\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\nexport const firebaseInstance = firebase\r\nexport const authService = firebase.auth()\r\nexport const dbService = firebase.firestore()\r\nexport const storageService = firebase.storage()\r\n","import React, { useState } from \"react\"\r\nimport { dbService, storageService } from \"fbase\"\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n    const [editing, setEditing] = useState(false)\r\n    const [newNweet, setNewNweet] = useState(nweetObj.text)\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"Are you sure you want to delete this nweet?\")\r\n        if (ok) {\r\n            await dbService.doc(`nweets/${nweetObj.id}`).delete()\r\n            await storageService.refFromURL(nweetObj.attachmentUrl).delete()\r\n        }\r\n    }\r\n    const toggleEditing = () => {\r\n        setEditing((prev) => !prev)\r\n    }\r\n    const onSubmit = (event) => {\r\n        event.preventDefault()\r\n        dbService.doc(`nweets/${nweetObj.id}`).update({\r\n            text: newNweet,\r\n        })\r\n        toggleEditing()\r\n    }\r\n    const onChange = (event) => {\r\n        const {\r\n            target: { value },\r\n        } = event\r\n        setNewNweet(value)\r\n    }\r\n    return (\r\n        <div>\r\n            {editing ? (\r\n                <>\r\n                    <form onSubmit={onSubmit}>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Edit your nweet\"\r\n                            value={newNweet}\r\n                            required\r\n                            onChange={onChange}\r\n                        ></input>\r\n                        <input type=\"submit\" value=\"Edit\"></input>\r\n                    </form>\r\n                    <button onClick={toggleEditing}>Cancel</button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <h4>{nweetObj.text}</h4>\r\n                    {nweetObj.attachmentUrl && (\r\n                        <img\r\n                            src={nweetObj.attachmentUrl}\r\n                            width=\"50px\"\r\n                            height=\"50px\"\r\n                            alt=\"nweeted img\"\r\n                        ></img>\r\n                    )}\r\n                    {isOwner && (\r\n                        <>\r\n                            <button onClick={onDeleteClick}>Delete Nweet</button>\r\n                            <button onClick={toggleEditing}>Edit Nweet</button>\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nweet\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { dbService, storageService } from \"fbase\"\r\nimport Nweet from \"components/Nweet\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\n\r\nconst Home = ({ userObj }) => {\r\n    const [nweet, setNweet] = useState(\"\")\r\n    const [nweets, setNweets] = useState([])\r\n    const [attachment, setAttachment] = useState(\"\")\r\n    useEffect(() => {\r\n        dbService.collection(\"nweets\").onSnapshot((snapshot) => {\r\n            const nweetArray = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }))\r\n            setNweets(nweetArray)\r\n        })\r\n    }, [])\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault()\r\n        let attachmentUrl = \"\"\r\n        if (attachment !== \"\") {\r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`)\r\n            const response = await attachmentRef.putString(attachment, \"data_url\")\r\n            attachmentUrl = await response.ref.getDownloadURL()\r\n        }\r\n        const nweetObj = {\r\n            text: nweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n            attachmentUrl,\r\n        }\r\n        await dbService.collection(\"nweets\").add(nweetObj)\r\n        setNweet(\"\")\r\n        setAttachment(\"\")\r\n        // 초기화시키면 input의 value에 작성되었던 텍스트가 남아있지 않겠지\r\n    }\r\n    const onChange = (event) => {\r\n        const {\r\n            target: { value },\r\n        } = event\r\n        setNweet(value)\r\n    }\r\n    const onFileChange = (event) => {\r\n        const {\r\n            target: { files },\r\n        } = event\r\n        const theFile = files[0]\r\n        const reader = new FileReader()\r\n        reader.onloadend = (finishedEvent) => {\r\n            const {\r\n                currentTarget: { result },\r\n            } = finishedEvent\r\n            setAttachment(result)\r\n        }\r\n        reader.readAsDataURL(theFile)\r\n    }\r\n    const onClearAttachment = () => {\r\n        setAttachment(\"\")\r\n    }\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    onChange={onChange}\r\n                    value={nweet}\r\n                ></input>\r\n                <input type=\"file\" accept=\"image/*\" onChange={onFileChange} id=\"upload\"></input>\r\n                <input type=\"submit\" value=\"Nweet\"></input>\r\n                {attachment && (\r\n                    <div>\r\n                        <img src={attachment} width=\"50px\" height=\"50px\" alt=\"thumb\"></img>\r\n                        <button onClick={onClearAttachment}>Clear</button>\r\n                    </div>\r\n                )}\r\n            </form>\r\n            <div>\r\n                {nweets.map((nweet) => {\r\n                    return (\r\n                        <Nweet\r\n                            key={nweet.id}\r\n                            nweetObj={nweet}\r\n                            isOwner={nweet.creatorId === userObj.uid}\r\n                        ></Nweet>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import { authService, firebaseInstance } from \"fbase\"\r\nimport React, { useState } from \"react\"\r\n\r\nconst Auth = () => {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [newAccount, setNewAccount] = useState(true)\r\n    const [error, setError] = useState(\"\")\r\n\r\n    const onChange = (event) => {\r\n        // onChange 함수를 하나만 사용해서 form을 반응시켜라\r\n        const {\r\n            target: { name, value },\r\n        } = event\r\n        if (name === \"email\") {\r\n            setEmail(value)\r\n        } else if (name === \"password\") {\r\n            setPassword(value)\r\n        }\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault()\r\n        try {\r\n            if (newAccount) {\r\n                await authService.createUserWithEmailAndPassword(email, password)\r\n            } else {\r\n                await authService.signInWithEmailAndPassword(email, password)\r\n            }\r\n        } catch (error) {\r\n            setError(error.message)\r\n        }\r\n    }\r\n    const toggleAccount = () => {\r\n        // 이 함수는 newAccount(계정존재여부)를 토글한다.\r\n        setNewAccount((prev) => !prev)\r\n    }\r\n    const onSocialClick = async (event) => {\r\n        const {\r\n            target: { name },\r\n        } = event\r\n        let provider\r\n        if (name === \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider()\r\n        } else if (name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider()\r\n        }\r\n        await authService.signInWithPopup(provider)\r\n    }\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSubmit}>\r\n                <input\r\n                    name=\"email\"\r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    required\r\n                    value={email}\r\n                    onChange={onChange}\r\n                ></input>\r\n                <input\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    required\r\n                    value={password}\r\n                    onChange={onChange}\r\n                ></input>\r\n                <input type=\"submit\" value={newAccount ? \"Create New Account\" : \"Login\"}></input>\r\n                <span>{error}</span>\r\n            </form>\r\n            <span onClick={toggleAccount}>테스트용</span>\r\n            <div>\r\n                <button onClick={onSocialClick} name=\"google\">\r\n                    Continue with Google\r\n                </button>\r\n                <button onClick={onSocialClick} name=\"github\">\r\n                    Continue with Github\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { authService, dbService } from \"fbase\"\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nexport default ({ userObj, refreshUser }) => {\r\n    // -- hooks --\r\n    const history = useHistory()\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\r\n\r\n    // -- user Update function --\r\n    const onLogOutClick = () => {\r\n        authService.signOut()\r\n        history.push(\"/\")\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault()\r\n        if (userObj.displayName !== newDisplayName) {\r\n            await userObj.updateProfile({ displayName: newDisplayName })\r\n        }\r\n        refreshUser()\r\n    }\r\n    const onChange = (event) => {\r\n        const {\r\n            target: { value },\r\n        } = event\r\n        setNewDisplayName(value)\r\n    }\r\n    // -- Nweet List function --\r\n    const getMyNweets = async () => {\r\n        const nweets = await dbService\r\n            .collection(\"nweets\")\r\n            .where(\"creatorId\", \"==\", userObj.uid)\r\n            .orderBy(\"createdAt\")\r\n            .get()\r\n        // console.log(nweets.docs.map((doc) => doc.data()))\r\n    }\r\n\r\n    // -- state변화 감지 --\r\n    useEffect(() => {\r\n        getMyNweets()\r\n    }, [])\r\n\r\n    // DOM 출력\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Display name\"\r\n                    value={newDisplayName}\r\n                    onChange={onChange}\r\n                />\r\n                <input type=\"submit\" value=\"Update Profile\" />\r\n            </form>\r\n            <button onClick={onLogOutClick}>Log Out</button>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst Navigation = ({ userObj }) => (\r\n    <nav>\r\n        <ul>\r\n            <li>\r\n                <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/profile\">{userObj.displayName}의 프로필</Link>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n)\r\nexport default Navigation\r\n","import React from \"react\"\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\"\r\nimport Home from \"routes/Home\"\r\nimport Auth from \"routes/Auth\"\r\nimport Profile from \"routes/Profile\"\r\nimport Navigation from \"./Navigation\"\r\n\r\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj}></Navigation>}\r\n            <Switch>\r\n                {isLoggedIn ? (\r\n                    <>\r\n                        <Route exact path=\"/\">\r\n                            <Home userObj={userObj}></Home>\r\n                        </Route>\r\n                        <Route exact path=\"/profile\">\r\n                            <Profile userObj={userObj} refreshUser={refreshUser}></Profile>\r\n                        </Route>\r\n                    </>\r\n                ) : (\r\n                    <Route exact path=\"/\">\r\n                        <Auth></Auth>\r\n                    </Route>\r\n                )}\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter\r\n","import React, { useEffect, useState } from \"react\"\nimport AppRouter from \"components/Router\"\nimport { authService } from \"fbase\"\nimport { auth } from \"firebase\"\n\nfunction App() {\n    const [init, setInit] = useState(false)\n    const [userObj, setUserObj] = useState(null)\n    useEffect(() => {\n        authService.onAuthStateChanged((user) => {\n            if (user) {\n                setUserObj({\n                    displayName: user.displayName,\n                    uid: user.uid,\n                    updateProfile: (args) => user.updateProfile(args),\n                })\n            } else {\n                setUserObj(null)\n            }\n            setInit(true)\n        })\n    }, [])\n\n    // 유저명 업데이트 함수 -------------------------------------\n    const refreshUser = () => {\n        const user = authService.currentUser\n        // user는 로그인한 사용자 정보를 가져오고, 로그인 아니면 null한다\n        setUserObj({\n            displayName: user.displayName,\n            uid: user.uid,\n            updateProfile: (args) => user.updateProfile(args),\n        })\n    }\n\n    return (\n        <>\n            {init ? (\n                <AppRouter\n                    isLoggedIn={Boolean(userObj)}\n                    userObj={userObj}\n                    refreshUser={refreshUser}\n                ></AppRouter>\n            ) : (\n                \"initializing...\"\n            )}\n            <footer>&copy; Nwitter {new Date().getFullYear()}</footer>\n        </>\n    )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./components/App\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n"],"sourceRoot":""}